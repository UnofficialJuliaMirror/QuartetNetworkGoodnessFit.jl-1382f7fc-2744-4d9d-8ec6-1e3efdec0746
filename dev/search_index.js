var documenterSearchIndex = {"docs":
[{"location":"lib/public/#public-documentation-1","page":"public","title":"public documentation","text":"","category":"section"},{"location":"lib/public/#","page":"public","title":"public","text":"Documentation for QuartetNetworkGoodnessFit's public (exported) functions.","category":"page"},{"location":"lib/public/#index-1","page":"public","title":"index","text":"","category":"section"},{"location":"lib/public/#","page":"public","title":"public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#functions-1","page":"public","title":"functions","text":"","category":"section"},{"location":"lib/public/#","page":"public","title":"public","text":"Modules = [QuartetNetworkGoodnessFit]\nPrivate = false\nOrder   = [:function]","category":"page"},{"location":"lib/public/#QuartetNetworkGoodnessFit.quarnetGoFtest!-Tuple{PhyloNetworks.HybridNetwork,DataFrames.DataFrame,Bool}","page":"public","title":"QuartetNetworkGoodnessFit.quarnetGoFtest!","text":"quarnetGoFtest!(net::HybridNetwork, df::DataFrame, optbl::Bool; quartetstat=:LRT, correction=:simulation, seed=1234, nsim=1000, verbose=false, keepfiles=false)\nquarnetGoFtest!(net::HybridNetwork, dcf::DataCF,   optbl::Bool; kwargs...)\n\nGoodness-of-fit test for the adequacy of the multispecies network coalescent, to see if a given population or species network explains the quartet concordance factor data adequately. The network needs to be of level 1 at most (trees fullfil this condition), and have branch lengths in coalescent units. The test assumes a multinomial distribution for the observed quartet concordance factors (CF), such that information on the number of genes for each four-taxon set (ngenes field) must be present.\n\nFor each four-taxon set, an outlier p-value is obtained by comparing a test statistic (-2log likelihood ratio by default) to a chi-square distribution with 2 degrees of freedom (see below for other options).\n\nThe four-taxon sets are then categorized as outliers or not, according to their outlier p-values (outlier if p<0.05). Finally, a one-sided goodness-of-fit test is performed on the frequency of outlier 4-taxon sets to see if there are more outliers than expected. The z-value for this test corresponds to the null hypothesis that 5% outlier p-values are < 0.05 (versus more than 5%): z = fracproportion_of_outliers - 005sqrt(005 * 095number_4_taxon_sets) This z-value corresponds to a test that assumes independent outlier p-values across 4-taxon sets: it makes no correction for dependence.\n\nTo correct for dependence with correction=:simulation, the distribution of z-values is obtained by simulating gene trees under the coalescent along the network (after branch length optimization if optbl=true) using hybrid-Lambda. The z-score is calculated on each simulated data set. Under independence, these z-scores have mean 0 and variance 1. Under dependence, these z-scores still have mean 0, but an inflated variance. This variance σ² is estimated from the simulations, and the corrected p-value is obtained by comparing the original z value to N(0,σ). When correction=:none, σ is taken to be 1 (independence): not recommended!\n\nThe first version takes a DataFrame where each row corresponds to a given four-taxon set. The data frame is modified by having an additional another column containing the p-values corresponding to each four-taxon set.\nThe second version takes a DataCF object and modifies it by updating the expected concordance factors stored in that object.\n\narguments\n\noptbl: when false, net.loglik is updated but branch lengths are taken as is. When true, a copy of net is used to conduce the test, with optimized branch lengths (in coalescent units) and updated loglik. This network is returned.\n\nkeyword arguments\n\nquartetstat: the test statistic used to obtain an outlier p-value for each four-taxon set, which is then compared to a chi-squared distribution with 2 degrees of freedom to get a p-value. The default is :LRT for the likelihood ratio: 2n_genes sum_j=1^3 hat p_j (loghat p_j - log p_j) where p_j is the quartet CF expected from the network, and hat p_j is the quartet CF observed in the data.   Alternatives are :Qlog for the Qlog statistics (Lorenzen, 1995): 2n_genes sum_j=1^3 frac(hat p_j - p_j)^2p_j (loghat p_j - log p_j)   and :pearson for Pearon's chi-squared statistic, which behaves poorly when the expected count is low (e.g. less than 5): n_genes sum_j=1^3 frac(hat p_j - p_j)^2 p_j\ncorrection=:simulation to correct for dependence across 4-taxon. Use :none to turn off simulations (and the correction for dependence).\nseed=1234: master seed to control the seeds for gene tree simulations.\nnsim=1000: number of simulated data sets. Each data set is simulated to have the median number of genes that each 4-taxon sets has data for.\nverbose=false: output from hybrid-Lambda and other output is suppressed. Turn to true to diagnose potential issues.\nkeepfiles=false: files generated by hybrid-Lambda are stored in a temporary folder, whose name starts with jl_ and placed in the current directory. Each of the 1000 simulations creates a file, that is deleted when is no longer necessary. Turn keepfiles=true to keep these gene tree files.\n\noutput\n\np-value of the overall goodness-of-fit test (corrected for dependence if requested)\ntest statistic (z value), uncorrected\nestimated σ for the test statistic, used for the correction (1.0 if no correction)\na vector of outlier p-values, one for each four-taxon set\nnetwork (first and second versions): net with loglik field updated if optbl is false;  copy of net with optimized branch lengths and loglik if optbl is true\nin case correction = :simulation, vector of simulated z values (nothing if correction = :none). These z-values could be used to calculate an empirical p-value (instead of the p-value in #1), as the proportion of simulated z-values that are ⩾ the observed z-value (in #2).\n\nSee also: ticr!.\n\nreferences\n\nLorenzen (1995). A new family of goodness-of-fit statistics for discrete multivariate data. Statistics & Probability Letters, 25(4):301-307. doi: 10.1016/0167-7152(94)00234-8\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#QuartetNetworkGoodnessFit.quarnetGoFtest-Tuple{Array{PhyloNetworks.Quartet,1},Function}","page":"public","title":"QuartetNetworkGoodnessFit.quarnetGoFtest","text":"quarnetGoFtest(quartet::Vector{Quartet}, outlierp_fun!::Function)\nquarnetGoFtest(outlier_pvalues::AbstractVector)\n\nCalculate an outlier p-value for each quartet according to function outlierp_fun! (or take outlier-values as input: second version) and calculate the z-value to test the null hypothesis that 5% of the p-values are < 0.05, versus the one-sided alternative of more outliers than expected.\n\nSee quarnetGoFtest! for more details.\n\nOutput:\n\nz-value\noutlier p-values (first version only)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#QuartetNetworkGoodnessFit.ticr!-Tuple{PhyloNetworks.HybridNetwork,DataFrames.DataFrame,Bool}","page":"public","title":"QuartetNetworkGoodnessFit.ticr!","text":"ticr!(net::HybridNetwork, df::DataFrame, optbl::Bool; quartetstat, test)\nticr!(net::HybridNetwork, dcf::DataCF,   optbl::Bool; quartetstat, test)\nticr(dcf::DataCF, quartetstat::Symbol, test::Symbol)\n\nGoodness-of-fit test for the adequacy of the multispecies network coalescent, to see if a given population or species network explains the quartet concordance factor data adequately. See Stenz et al 2015 and addendum for the method on trees, from which the acronym TICR was derived: Tree Incongruence Checking with R.\n\nThe tree / network needs to have branch lengths in coalescent units, and must be of level 1. It must be fully resolved, such that the \"major\" quartet is clearly defined, even though branch lengths can be 0.\n\nThe Dirichlet distribution is used to fit the distribution of the observed quartet concordance factors (CF), with a concentration parameter estimated from the data.\n\nThe four-taxon sets are then binned into categories according to their outlier p-values: 0-0.01, 0.01-0.05, 0.05-0.10, and 0.10-1. Finally, a one-sided goodness-of-fit test is performed on these binned frequencies to determine if they depart from an expected 5% p-values being below 0.05 (versus more than 5%), using the default test = :onesided. Alternatively, the option test = :goodness carries out the overall goodness-of-fit chi-square test proposed by Stenz et al. (2015), to test for any kind of departure from the expected frequencies (0.01, 0.04, 0.05, 0.90) across all 4 bins.\n\nThe first version takes a DataFrame where each row corresponds to a given four-taxon set. The data frame is modified by having an additional another column containing the outlier p-values corresponding to each four-taxon set.\nThe second version takes a DataCF object and modifies it by updating the expected concordance factors stored in that object.\nThe last version (which all others call) assumes that the expected concordance factors in the DataCF object are correctly calculated from the test network.\n\narguments\n\noptbl: when false, the loglik field of net is updated but branch lengths are taken as is. When true, a copy of net is used to conduce the test, with updated branch lengths (in coalescent units) and updated loglik. This network is returned.\nquartetstat = :maxCF: test statistic used to obtain an outlier p-value for each four-taxon set. By default, it is the absolute difference between the observed CF and expected CF of the major resolution (which has the largest CF) if quartetstat=:maxCF, as used in Stenz et al. (2015). The other option is quartetstat=:minpval, in which case the absolute difference between the observed CF and expected CF is calculated for all 3 resolutions, leading to 3 (non-independent) p-values. The outlier p-value for a given four-taxon set is taken as the minimum of these 3 p-values. This option can detect all kinds of departure from the network model for a given four-taxon set, but is not recommended because it is very liberal.\ntest = :onesided: the overall goodness-of-fit test performed on binned frequencies of quartet outlier p-values; see above.\n\noutput\n\np-value of the overall goodness-of-fit test\ntest statistic (z value)\na dictionary of the count of p-values in each of the four category\na vector of two test parameters for the Dirichlet distribution:\nvalue of the concentration parameter α\nvalue of the pseudo likelihood (optimized at α)\na vector of outlier p-values, one for each four-taxon set\nnetwork (first and second versions): net with loglik field updated if optbl is false;  copy of net with optimized branch lengths and loglik if optbl is true\n\nreferences\n\nNWM Stenz, B Larget, DA Baum and C Ané (2015). Exploring tree-like and non-tree-like patterns using genome sequences: An example using the inbreeding plant species Arabidopsis thaliana (L.) Heynh. Systematic Biology, 64(5):809-823. doi: 10.1093/sysbio/syv039\n\n\n\n\n\n","category":"method"},{"location":"#QuartetNetworkGoodnessFit.jl-1","page":"home","title":"QuartetNetworkGoodnessFit.jl","text":"","category":"section"},{"location":"#","page":"home","title":"home","text":"Julia package to measure the goodness of fit of a phylogenetic network to data on subsets of 4 tips. It depends on the PhyloNetworks package.","category":"page"},{"location":"#","page":"home","title":"home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]\nDepth = 1","category":"page"},{"location":"#functions-1","page":"home","title":"functions","text":"","category":"section"},{"location":"#","page":"home","title":"home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]\nOrder = [:function]","category":"page"},{"location":"lib/internal/#internal-documentation-1","page":"internal","title":"internal documentation","text":"","category":"section"},{"location":"lib/internal/#","page":"internal","title":"internal","text":"Documentation for QuartetNetworkGoodnessFit's internal functions. Those functions are not exported, but can still be used (like: QuartetNetworkGoodnessFit.foo() for a function named foo()).","category":"page"},{"location":"lib/internal/#index-1","page":"internal","title":"index","text":"","category":"section"},{"location":"lib/internal/#","page":"internal","title":"internal","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internal/#functions-1","page":"internal","title":"functions","text":"","category":"section"},{"location":"lib/internal/#","page":"internal","title":"internal","text":"Modules = [QuartetNetworkGoodnessFit]\nPublic  = false\nOrder   = [:function]","category":"page"},{"location":"lib/internal/#QuartetNetworkGoodnessFit.dirichlet_max-Tuple{PhyloNetworks.DataCF}","page":"internal","title":"QuartetNetworkGoodnessFit.dirichlet_max","text":"dirichlet_max(dcf::DataCF)\n\nCalculate outlier p-values, one for each four-taxon set, using the maximum concordance factor under a Dirichlet distribution. Used by ticr!.\n\noutput\n\nvector of outlier p-values, one for each 4-taxon set\nvalue of the concentration parameter α\nvalue of the pseudo likelihood (optimized at α)\n\n\n\n\n\n","category":"method"},{"location":"lib/internal/#QuartetNetworkGoodnessFit.dirichlet_min-Tuple{PhyloNetworks.DataCF}","page":"internal","title":"QuartetNetworkGoodnessFit.dirichlet_min","text":"dirichlet_min(dcf::DataCF)\n\nFirst calculate outlier p-values using each of the three concordance factors for each quartet under a Dirichlet distribution, then take the smallest p-value among the three, as the outlier p-value for each four-taxon set.\n\noutput\n\na vector of outlier p-values, one for each quartet\nvalue of the concentration parameter α\nvalue of the pseudo likelihood (optimized at α)\n\n\n\n\n\n","category":"method"},{"location":"lib/internal/#QuartetNetworkGoodnessFit.expectedCF_ordered","page":"internal","title":"QuartetNetworkGoodnessFit.expectedCF_ordered","text":"expectedCF_ordered(dcf::DataCF, net::HybridNetwork, suffix=\"\"::AbstractString)\n\nExpected quartet concordance factors in dcf, but ordered as they would be if output by PhyloNetworks.countquartetsintrees. Output:\n\n2-dimentional SharedArray (number of 4-taxon sets x 3). dcf.quartet[i].qnet.expCF[j] for 4-taxon set i and resolution j is stored in row qi and column k if qi is the rank of 4-taxon set i (see PhyloNetworks.quartetrank). This rank depends on how taxa are ordered.\nvector of taxon names, whose order matters. These are tip labels in net with suffix suffix added, then ordered alphabetically, or numerically if taxon names can be parsed as integers.\n\n\n\n\n\n","category":"function"},{"location":"lib/internal/#QuartetNetworkGoodnessFit.multinom_lrt!-Tuple{AbstractArray{Float64,1},Array{PhyloNetworks.Quartet,1}}","page":"internal","title":"QuartetNetworkGoodnessFit.multinom_lrt!","text":"multinom_lrt!(pval::AbstractVector{Float64}, quartet::Vector{Quartet})\nmultinom_lrt!(pval::AbstractVector{Float64}, obsCF, expCF::AbstractMatrix{Float64})\n\nCalculate outlier p-values (one per four-taxon set) using the likelihood ratio test under a multinomial distribution for the observed concordance factors.\n\n\n\n\n\n","category":"method"},{"location":"lib/internal/#QuartetNetworkGoodnessFit.multinom_pearson!-Tuple{AbstractArray{Float64,1},Array{PhyloNetworks.Quartet,1}}","page":"internal","title":"QuartetNetworkGoodnessFit.multinom_pearson!","text":"multinom_pearson!(pval::AbstractVector{Float64}, quartet::Vector{Quartet})\nmultinom_pearson!(pval::AbstractVector{Float64}, obsCF, expCF::AbstractMatrix{Float64})\n\nCalculate outlier p-values (one per four-taxon set) using Pearson's chi-squared statistic under a multinomial distribution for the observed concordance factors.\n\n\n\n\n\n","category":"method"},{"location":"lib/internal/#QuartetNetworkGoodnessFit.multinom_qlog!-Tuple{AbstractArray{Float64,1},Array{PhyloNetworks.Quartet,1}}","page":"internal","title":"QuartetNetworkGoodnessFit.multinom_qlog!","text":"multinom_qlog!(pval::AbstractVector{Float64}, quartet::Vector{Quartet})\nmultinom_qlog!(pval::AbstractVector{Float64}, obsCF, expCF::AbstractMatrix{Float64})\n\nCalculate outlier p-values (one per four-taxon set) using the Qlog statistic (Lorenzen, 1995), under a multinomial distribution for the observed concordance factors.\n\n\n\n\n\n","category":"method"},{"location":"lib/internal/#QuartetNetworkGoodnessFit.quarnetGoFtest_simulation-Tuple{PhyloNetworks.HybridNetwork,PhyloNetworks.DataCF,Function,Int64,Int64,Bool,Bool}","page":"internal","title":"QuartetNetworkGoodnessFit.quarnetGoFtest_simulation","text":"quarnetGoFtest_simulation(net::HybridNetwork, dcf::DataCF, outlierp_fun!::Function,\n                          seed::Int, nsim::Int, verbose::Bool, keepfiles::Bool)\n\nRun external program hybrid-Lambda (downloaded at installation, with path stored in QuartetNetworkGoodnessFit.hybridlambda) to simulate gene trees under the multispecies coalescent model along network net. The quartet concordance factors (CFs) from these simulated gene trees are used as input to outlierp_fun! to categorize each 4-taxon set as an outlier (p-value < 0.05) or not. For each simulated data set, a goodness-of-fit z-value is calculated by comparing the proportion of outlier 4-taxon sets to 0.05. The standard deviation of these z-values (assuming a mean of 0), and the z-values themselves are returned.\n\nUsed by quarnetGoFtest!.\n\nWarning: The quartet CFs expected from net are assumed to be stored in dcf.quartet[i].qnet.expCF. This is not checked.\n\n\n\n\n\n","category":"method"},{"location":"lib/internal/#QuartetNetworkGoodnessFit.ticr_optimalpha-Tuple{PhyloNetworks.DataCF}","page":"internal","title":"QuartetNetworkGoodnessFit.ticr_optimalpha","text":"ticr_optimalpha(dcf::DataCF)\n\nFind the concentration parameter α by maximizing the pseudo-log-likelihood of observed quartet concordance factors. The model assumes a Dirichlet distribution with mean equal to the expected concordance factors calculated from a phylogenetic network (under ILS). These expected CFs are assumed to be already calculated, and stored in dcf.\n\nWhen calculating the pseudo-log-likelihood, this function checks the observed concordance factors for any values equal to zero: they cause a problem because the Dirichlet density is 0 at 0 (for concentration α > 1). Those 0.0 observed CF values are re-set to the minimum of:\n\nthe minimum of all expected concordance factors, and\nthe minimum of all nonzero observed concordance factors.\n\noutput\n\nmaximized pseudo-loglikelihood\nvalue of α where the pseudo-loglikelihood is maximized\nreturn code of the optimization\n\nThe optimization uses NLOpt, with the :LN_BOBYQA method. Optional arguments can tune the optimization differently: nloptmethod, xtol_rel (1e-6 by default), starting α value x_start (1.0 by default).\n\n\n\n\n\n","category":"method"}]
}
